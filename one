using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class one : MonoBehaviour
{
    public GameObject kage;//追跡するオブジェクト
    public GameObject targetObject;

    public static bool a = false;//床や壁に触れているか
    public bool reverse;

    public Vector2 rotationSpeed = new Vector2(0.1f, -0.2f);//回転するスピード
    public float zoomSpeed = 1;//ズームスピード

    private Camera mainCamera;
    private Vector2 lastMousePosition;

    Rigidbody rb;

    // Start is called before the first frame update
    void Start()
    {
        mainCamera = Camera.main;
    }

    // Update is called once per frame
    void Update()
    {
        //kageと同じ位置にする
        transform.position = kage.transform.position;
       
        if (a==true)//床や壁に触れているとき
        {
            if (Input.GetKey(KeyCode.Alpha1))
            {
                //2,3,4が押されていない時
                if(!Input.GetKey(KeyCode.Alpha2)|| !Input.GetKey(KeyCode.Alpha3)|| !Input.GetKey(KeyCode.Alpha4))
                {
                    if (grip.g >= 0f)//グリップゲージが0じゃない時
                    {
                        if (Input.GetMouseButtonDown(0))
                        {
                            lastMousePosition = Input.mousePosition;
                        }
                        else if (Input.GetMouseButton(0))
                        {
                            if (!reverse)//リバースしてるとき
                            {
                                //回転する処理
                                var x = (Input.mousePosition.y - lastMousePosition.y);
                                var y = (lastMousePosition.x - Input.mousePosition.x);

                                var newAngle = Vector3.zero;
                                newAngle.x = x * rotationSpeed.x;
                                newAngle.y = y * rotationSpeed.y;

                                targetObject.transform.Rotate(newAngle);
                                lastMousePosition = Input.mousePosition;
                            }
                            else
                            {
                                var x = (lastMousePosition.y - Input.mousePosition.y);
                                var y = (Input.mousePosition.x - lastMousePosition.x);

                                var newAngle = Vector3.zero;
                                newAngle.x = x * rotationSpeed.x;
                                newAngle.y = y * rotationSpeed.y;

                                targetObject.transform.Rotate(newAngle);
                                lastMousePosition = Input.mousePosition;
                            }
                        }
                    }
                }
            }
        }

        if (Input.GetKeyUp(KeyCode.Alpha1))
        {
            if(!Input.GetKey(KeyCode.Alpha2)|| !Input.GetKey(KeyCode.Alpha3)||!Input.GetKey(KeyCode.Alpha4))
            {
                //すぐリセットすると位置がおかしくなるため少し遅らせる
                Invoke("ResetMethod", 0.3f);
            }
        }
    }


    void OnTriggerStay(Collider other)//床や壁に触れているとき
    {
        a = true;
    }

    void OnTriggerExit(Collider col)//床や壁から離れたとき
    {
        a = false;
    }

    void ResetMehtod()
    {
        //位置をリセットする処理
        transform.rotation = kage.transform.rotation;
    }

}
